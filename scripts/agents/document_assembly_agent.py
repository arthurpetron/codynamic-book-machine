import os
import yaml
import difflib
from datetime import datetime
from pathlib import Path

BOOK_ROOT = Path("book_data/codynamic_theory_book")
OUTLINE_PATH = BOOK_ROOT / "outline/codynamic_theory.yaml"
SECTION_PAYLOAD_DIR = BOOK_ROOT / "tex/section_payloads"
OUTPUT_TEX_PATH = BOOK_ROOT / "tex/codynamic_theory.tex"
LOG_DIR = BOOK_ROOT / "logs"
LOG_DIR.mkdir(parents=True, exist_ok=True)


def load_outline(path):
    with open(path, "r") as f:
        return yaml.safe_load(f)["outline"]


def load_section_payload(section_id):
    filename = f"{section_id}.tex"
    path = SECTION_PAYLOAD_DIR / filename
    if not path.exists():
        return f"% [Missing section: {section_id}]\n"
    with open(path, "r") as f:
        return f.read()


def call_document_design_agent(outline):
    """
    Simulated LLM agent response. In the future, this will be an actual LLM or local API call.
    """
    return r"""
% Generated by document_design_agent
\usepackage{geometry}
\geometry{margin=1in}
\usepackage{graphicx}
\usepackage{amsmath, amssymb}
\usepackage{hyperref}
\usepackage{fancyhdr}
\pagestyle{fancy}
"""


def generate_preamble(outline):
    title = outline["title"]
    author = outline["intent"].get("author_persona", "Anonymous")
    base = f"""\\documentclass[11pt]{{article}}
\\usepackage[utf8]{{inputenc}}
\\title{{{title}}}
\\author{{{author}}}
"""
    style = call_document_design_agent(outline)
    return base + style + "\n\\begin{document}\n\\maketitle\n"


def assemble_tex(outline):
    doc = [generate_preamble(outline)]
    for chapter in outline.get("chapters", []):
        doc.append(f"\\section*{{{chapter['title']}}}\n")
        for section in chapter.get("sections", []):
            section_tex = load_section_payload(section["id"])
            doc.append(section_tex + "\n")
    doc.append("\\end{document}\n")
    return "\n".join(doc)


def write_tex_file(content, output_path):
    if output_path.exists():
        with open(output_path, "r") as f:
            old_content = f.readlines()
    else:
        old_content = []

    new_content = content.splitlines(keepends=True)
    with open(output_path, "w") as f:
        f.writelines(new_content)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    diff_path = LOG_DIR / f"tex_diff_{timestamp}.diff"
    diff = difflib.unified_diff(
        old_content, new_content,
        fromfile=str(output_path),
        tofile=str(output_path),
        lineterm=""
    )
    with open(diff_path, "w") as f:
        f.writelines(line + "\n" for line in diff)

    print(f"[Agent] Diff written to: {diff_path}")


def run_document_assembly():
    print("[Agent] Starting document assembly...")
    outline = load_outline(OUTLINE_PATH)
    tex_content = assemble_tex(outline)
    write_tex_file(tex_content, OUTPUT_TEX_PATH)
    print(f"[Agent] Wrote assembled TeX to: {OUTPUT_TEX_PATH}")


if __name__ == "__main__":
    run_document_assembly()